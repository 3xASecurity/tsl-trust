/*
 * Copyright 2012 Swedish Agency for Economic and Regional Growth - Tillväxtverket 
 *  		 
 * Licensed under the EUPL, Version 1.1 or ñ as soon they will be approved by the 
 * European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence. 
 * You may obtain a copy of the Licence at:
 *
 * http://joinup.ec.europa.eu/software/page/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed 
 * under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations 
 * under the Licence.
 */
package se.tillvaxtverket.tsltrust.admin.maint;

import se.tillvaxtverket.tsltrust.common.html.elements.HtmlElement;
import se.tillvaxtverket.tsltrust.admin.maint.ca.CertificationAuthority;
import se.tillvaxtverket.tsltrust.admin.maint.ca.utils.CaKeyStoreConstants;
import se.tillvaxtverket.tsltrust.admin.maint.ca.utils.HtmlTable;
import se.tillvaxtverket.tsltrust.common.utils.general.ConfigConstants;
import se.tillvaxtverket.tsltrust.common.utils.general.FileOps;
import se.tillvaxtverket.tsltrust.common.utils.general.KsCertFactory;
import se.tillvaxtverket.tsltrust.common.utils.general.ObservableFrameCloser;
import se.tillvaxtverket.tsltrust.common.utils.general.ObserverConstants;
import se.tillvaxtverket.tsltrust.weblogic.content.TTConstants;
import se.tillvaxtverket.tsltrust.weblogic.data.DbCALog;
import se.tillvaxtverket.tsltrust.weblogic.data.DbCert;
import se.tillvaxtverket.tsltrust.weblogic.data.ValidationPolicy;
import se.tillvaxtverket.tsltrust.weblogic.db.CaSQLiteUtil;
import se.tillvaxtverket.tsltrust.weblogic.models.TslTrustModel;
import se.tillvaxtverket.tsltrust.weblogic.utils.ASN1Util;
import iaik.pkcs.PKCS7CertList;
import iaik.x509.X509CRL;
import iaik.x509.X509Certificate;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Observer;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import se.tillvaxtverket.tsltrust.weblogic.models.TslTrustConfig;

/**
 * This class provides an internal frame providing functions for inspecting the state
 * of the configured Policy CAs and their issued certificates.
 */
public final class PolicyCaIF extends javax.swing.JInternalFrame implements ConfigConstants, ObserverConstants, TTConstants, CaKeyStoreConstants {

    private String homeDir;
    private String userid = "iaik", password = "iaik";
    private static final Logger LOG = Logger.getLogger(PolicyCaIF.class.getName());
    private static final Object TSL_TIMER = "CrlTimer";
    private ResourceBundle uiText = ResourceBundle.getBundle("adUiText");
    private ObservableFrameCloser frameCloser;
    private TslTrustModel model;
    private TslTrustConfig ttConfig;
    private X509Certificate currentRoot = null;
    private X509CRL currentCrl = null;
    private String caDir = "";
    private Console con;
    private long lastTableUpdate;
    private List<List<Long>> certIndexMap = new ArrayList<List<Long>>();
    private List<List<Long>> logIndexMap = new ArrayList<List<Long>>();
    private List<List<Long>> expIndexMap = new ArrayList<List<Long>>();

    /**
     * Creates new form PolicyCaIF 
     */
    public PolicyCaIF(TslTrustModel ttModel, TslTrustConfig conf, Observer closeObserver) {
        super("Policy CAs",
                true, //resizable
                true, //closable
                true, //maximizable
                true);//iconifiable
        initComponents();
        this.setVisible(true);

        model = ttModel;
        ttConfig = conf;
        frameCloser = new ObservableFrameCloser(this, closeObserver);
        con = new Console(jTextPaneConsole, 2);
        jComboBoxCaSelect.removeAllItems();

        jEditorPaneCertificates.setContentType("text/html");
        jEditorPaneExported.setContentType("text/html");
        jEditorPaneLog.setContentType("text/html");
        jEditorPaneCertificates.setText("");
        jEditorPaneLog.setText("");
        jEditorPaneExported.setText("");
        jCheckBoxReverse.setSelected(true);
        
        refreshCombobox();
        getPolicyTableData();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jComboBoxCaSelect = new javax.swing.JComboBox();
        jCheckBoxReverse = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPaneTables = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPaneLog = new javax.swing.JEditorPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPaneCertificates = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPaneExported = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneConsole = new javax.swing.JTextPane();
        jPanel5 = new javax.swing.JPanel();
        jButtonRoot = new javax.swing.JButton();
        jButtonCRL = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(601);

        jComboBoxCaSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxCaSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCaSelectItemStateChanged(evt);
            }
        });
        jComboBoxCaSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCaSelectActionPerformed(evt);
            }
        });

        jCheckBoxReverse.setText("Recent on top");
        jCheckBoxReverse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxReverseActionPerformed(evt);
            }
        });

        jEditorPaneLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jEditorPaneLogMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jEditorPaneLog);

        jTabbedPaneTables.addTab("Log", jScrollPane3);

        jEditorPaneCertificates.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jEditorPaneCertificatesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jEditorPaneCertificates);

        jTabbedPaneTables.addTab("Certificates", jScrollPane1);

        jEditorPaneExported.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jEditorPaneExportedMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jEditorPaneExported);

        jTabbedPaneTables.addTab("Exported", jScrollPane4);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 599, Short.MAX_VALUE)
            .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPaneTables, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 743, Short.MAX_VALUE)
            .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jTabbedPaneTables, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jComboBoxCaSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 368, Short.MAX_VALUE)
                .add(jCheckBoxReverse)
                .addContainerGap())
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxCaSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCheckBoxReverse))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        jScrollPane2.setViewportView(jTextPaneConsole);

        jButtonRoot.setText("Root Cert");
        jButtonRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRootActionPerformed(evt);
            }
        });

        jButtonCRL.setText("CRL");
        jButtonCRL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCRLActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jButtonRoot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButtonCRL)
                .addContainerGap(392, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonRoot)
                    .add(jButtonCRL))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel2);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1164, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxCaSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCaSelectItemStateChanged
    }//GEN-LAST:event_jComboBoxCaSelectItemStateChanged

    private void jComboBoxCaSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCaSelectActionPerformed
        refreshCombobox();
        getPolicyTableData();
    }//GEN-LAST:event_jComboBoxCaSelectActionPerformed

    private void jEditorPaneCertificatesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPaneCertificatesMouseReleased
        Long certSerial = getSelectedSerial(jEditorPaneCertificates, certIndexMap, jEditorPaneCertificates.getCaretPosition());
        displaySelectedCert(certSerial);
    }//GEN-LAST:event_jEditorPaneCertificatesMouseReleased

    private void jEditorPaneLogMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPaneLogMouseReleased
        Long certSerial = getSelectedSerial(jEditorPaneLog, logIndexMap, jEditorPaneLog.getCaretPosition());
        displaySelectedCert(certSerial);
    }//GEN-LAST:event_jEditorPaneLogMouseReleased

    private void jEditorPaneExportedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEditorPaneExportedMouseReleased
        Long certSerial = getSelectedSerial(jEditorPaneExported, expIndexMap, jEditorPaneExported.getCaretPosition());
        displaySelectedCert(certSerial);
    }//GEN-LAST:event_jEditorPaneExportedMouseReleased

    private void jCheckBoxReverseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxReverseActionPerformed
        getPolicyTableData();
    }//GEN-LAST:event_jCheckBoxReverseActionPerformed

    private void jButtonRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRootActionPerformed
        if (currentRoot != null) {
            jTextPaneConsole.setText(currentRoot.toString(true));
        }
    }//GEN-LAST:event_jButtonRootActionPerformed

    private void jButtonCRLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCRLActionPerformed
        if (currentCrl != null) {
            jTextPaneConsole.setText(currentCrl.toString(true));
        }
    }//GEN-LAST:event_jButtonCRLActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonCRL;
    private javax.swing.JButton jButtonRoot;
    private javax.swing.JCheckBox jCheckBoxReverse;
    private javax.swing.JComboBox jComboBoxCaSelect;
    private javax.swing.JEditorPane jEditorPaneCertificates;
    private javax.swing.JEditorPane jEditorPaneExported;
    private javax.swing.JEditorPane jEditorPaneLog;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPaneTables;
    private javax.swing.JTextPane jTextPaneConsole;
    // End of variables declaration//GEN-END:variables


    private boolean running(Thread thread) {
        return (thread != null && thread.isAlive());
    }

    public void stopDeamon() {
        killCacheIf();
    }

    private void killCacheIf() {
        frameCloser.close(CACHEDEAMON_CLOSE);
    }

    private void refreshCombobox() {
        int selected = jComboBoxCaSelect.getSelectedIndex();
        List<ValidationPolicy> validationPolicies = model.getPolicyDb().getValidationPolicies();
        if (jComboBoxCaSelect.getItemCount() != validationPolicies.size()) {
            selected = 0;
        }
        jComboBoxCaSelect.removeAllItems();
        for (ValidationPolicy vp : validationPolicies) {
            jComboBoxCaSelect.addItem(vp);
        }
        if (jComboBoxCaSelect.getItemCount() > 0) {
            jComboBoxCaSelect.setSelectedIndex(selected);
        }
    }

    private void getPolicyTableData() {
        if (System.currentTimeMillis() < lastTableUpdate + 100) {
            return;
        }
        try {
            ValidationPolicy vp = (ValidationPolicy) jComboBoxCaSelect.getSelectedItem();
            String pName = vp.getPolicyName();
            caDir = FileOps.getfileNameString(model.getDataLocation(), "CA/" + pName);
            if (!(new File(caDir).exists())){
                return;
            }
            List<DbCert> dbcerts = CaSQLiteUtil.getCertificates(caDir);
            List<DbCALog> certLogs = CaSQLiteUtil.getCertLogs(caDir);

            //Get root
            CertificationAuthority ca = new CertificationAuthority(pName, caDir, model);
            ca.initKeyStore();
            currentRoot = null;
            if (ca.isInitialized()) {
                currentRoot = ca.getSelfSignedCert();
            }
            //Get p7b certs
            File pkcs7File = new File(FileOps.getfileNameString(ttConfig.getCaFileStorageLocation(), "certs"), ca.getCaID() + ".p7b");
            InputStream in;
            List<X509Certificate> p7Certs = new ArrayList<X509Certificate>();
            in = new FileInputStream(pkcs7File);
            PKCS7CertList p7b = new PKCS7CertList(in);
            X509Certificate[] certs = p7b.getCertificateList();
            for (X509Certificate cert : certs) {
                p7Certs.add(cert);
            }
            //Get current CRL
            currentCrl = KsCertFactory.getCRL(FileOps.readBinaryFile(ca.getExportCrlFile()));

            getDbCertTable(dbcerts);
            getLogTable(certLogs);
            getP7CertTable(p7Certs);
            lastTableUpdate = System.currentTimeMillis();
        } catch (Exception ex) {
            LOG.warning("Certificate table display halted on Exception: " + ex.getMessage());
        }


    }

    private void getDbCertTable(List<DbCert> dbcerts) {
        // Set Charge table data
        certIndexMap.clear();
        int lastIndex = 0;
        String[] tableHead = new String[]{
            "Serial#",
            "Subject",
            "Revoked",
            "Revoke Date"};

        int len = stringArrayLen(tableHead);
        List<Long> titleIndex = setRowIndex(0, len, 0);
        certIndexMap.add(titleIndex);
        lastIndex = len;

        HtmlTable certTable = new HtmlTable();
        HtmlTable.RowStyle rowStyle = HtmlTable.RowStyle.HEADING;
        certTable.addRow(tableHead, HtmlTable.Type.CERTHEADING, rowStyle);

        int row = 0;

        if (jCheckBoxReverse.isSelected()) {
            Collections.reverse(dbcerts);
        }

        for (DbCert crt : dbcerts) {
            Calendar revokeTime = Calendar.getInstance();
            revokeTime.setTimeInMillis(crt.getRevDate());
            String revDateStr = "";
            if (crt.getRevDate() > 0) {
                revDateStr = TIME_FORMAT.format(revokeTime.getTime());
            }
            String revStr = "valid";
            if (crt.getRevoked() == 1) {
                revStr = "revoked";
            }
            String[] tableRowData = new String[]{
                String.valueOf(crt.getSerial()),
                ASN1Util.getShortCertName(crt.getCertificate()),
                //                crt.getCertificate().getSubjectDN().getName(),
                revStr,
                revDateStr};


            rowStyle = (row++ % 2 == 0) ? HtmlTable.RowStyle.EVEN : HtmlTable.RowStyle.ODD;
            certTable.addRow(tableRowData, HtmlTable.Type.CERT, rowStyle);

            // Add indexValues
            len = stringArrayLen(tableRowData);
            List<Long> rowIndex = setRowIndex(lastIndex, lastIndex + len, crt.getSerial());
            lastIndex += len;
            certIndexMap.add(rowIndex);
        }
        jEditorPaneCertificates.setText(getHtmlContent(certTable));
        jEditorPaneCertificates.setCaretPosition(0);
    }

    private void getLogTable(List<DbCALog> certLogs) {
        // Set Charge table data
        logIndexMap.clear();
        int lastIndex = 0;
        String[] tableHead = new String[]{
            "Log time",
            "Event",
            "Serial#",
            "Reasons"};

        int len = stringArrayLen(tableHead);
        List<Long> titleIndex = setRowIndex(0, len, 0);
        logIndexMap.add(titleIndex);
        lastIndex = len;

        HtmlTable logTable = new HtmlTable();
        HtmlTable.RowStyle rowStyle = HtmlTable.RowStyle.HEADING;
        logTable.addRow(tableHead, HtmlTable.Type.LOGHEADING, rowStyle);

        GregorianCalendar gc = new GregorianCalendar();
        if (jCheckBoxReverse.isSelected()) {
            Collections.reverse(certLogs);
        }
        int row = 0;
        for (DbCALog log : certLogs) {
            gc.setTimeInMillis(log.getLogTime());
            String logTime = (TIME_FORMAT.format(gc.getTime()));
            String event = (log.getEventString());
            Long certSerial = log.getLogParameter();
            String reason = "";
            if (log.getLogCode() == ISSUE_EVENT) {
                certSerial = log.getLogParameter();
            }
            if (log.getLogCode() == REVOKE_EVENT) {
                certSerial = log.getLogParameter() / 256;
                reason = "Revocation Reason=";
                long rc = log.getLogParameter() % 256;
                reason += ((rc < 11) ? REV_REASON[(int) rc] : String.valueOf(rc));
            }
            String[] tableRowData = new String[]{
                logTime,
                event,
                String.valueOf(certSerial),
                reason
            };
            rowStyle = (row++ % 2 == 0) ? HtmlTable.RowStyle.EVEN : HtmlTable.RowStyle.ODD;
            logTable.addRow(tableRowData, HtmlTable.Type.LOG, rowStyle);

            // Add indexValues
            len = stringArrayLen(tableRowData);
            List<Long> rowIndex = setRowIndex(lastIndex, lastIndex + len, certSerial);
            lastIndex += len;
            logIndexMap.add(rowIndex);
        }
        jEditorPaneLog.setText(getHtmlContent(logTable));
        jEditorPaneLog.setCaretPosition(0);
    }

    private void getP7CertTable(List<X509Certificate> p7Certs) {
        expIndexMap.clear();
        int lastIndex = 0;
        String[] tableHead = new String[]{
            "#",
            "Subject",
            "Serial#"};

        int len = stringArrayLen(tableHead);
        List<Long> titleIndex = setRowIndex(0, len, 0);
        expIndexMap.add(titleIndex);
        lastIndex = len;

        HtmlTable expTable = new HtmlTable();
        HtmlTable.RowStyle rowStyle = HtmlTable.RowStyle.HEADING;
        expTable.addRow(tableHead, HtmlTable.Type.EXPORTHEADING, rowStyle);

        GregorianCalendar gc = new GregorianCalendar();
        int row = 0;

        for (X509Certificate cert : p7Certs) {
            String[] tableRowData = new String[]{
                String.valueOf(row + 1),
                ASN1Util.getShortName(cert.getSubjectX500Principal()),
                String.valueOf(cert.getSerialNumber())
            };
            rowStyle = (row++ % 2 == 0) ? HtmlTable.RowStyle.EVEN : HtmlTable.RowStyle.ODD;
            expTable.addRow(tableRowData, HtmlTable.Type.EXPORT, rowStyle);

            // Add indexValues
            len = stringArrayLen(tableRowData);
            List<Long> rowIndex = setRowIndex(lastIndex, lastIndex + len, cert.getSerialNumber().longValue());
            lastIndex += len;
            expIndexMap.add(rowIndex);
        }
        jEditorPaneExported.setText(getHtmlContent(expTable));
        jEditorPaneExported.setCaretPosition(0);
    }

    private int stringArrayLen(String[] stringArray) {
        int len = 0;
        for (String str : stringArray) {
            len += str.length() + 1;
        }
        return len;
    }

    private List<Long> setRowIndex(long start, long end, long serial) {
        List<Long> intList = new ArrayList<Long>(3);

        intList.add(start);
        intList.add(end);
        intList.add(serial);

        return intList;
    }

    private void selectRow(JEditorPane editorPane, List<Long> indexList) {
        try {
            int start = indexList.get(0).intValue();
            int end = indexList.get(1).intValue();
            editorPane.setSelectionStart(start);
            editorPane.setSelectionEnd(end);
        } catch (Exception ex) {
        }
    }

    private long getSelectedSerial(JEditorPane editorPane, List<List<Long>> valueList, int caretPosition) {

        List<Long> indexList = null;
        Long serial = (long) 1;

        for (List<Long> values : valueList) {
            indexList = values;
            int start = indexList.get(0).intValue();
            int end = indexList.get(1).intValue();
            serial = indexList.get(2);
            if (caretPosition >= start && caretPosition < end) {
                break;
            }
        }

        selectRow(editorPane, indexList);
        return serial;
    }

    private String getHtmlContent(HtmlElement element) {
        StringBuilder b = new StringBuilder();
        b.append("<html><body>");
        b.append(element.toString());
        b.append("</body></html>");
        return b.toString();
    }

    private void displaySelectedCert(long serial) {
        if (serial == 0 || caDir.length() < 4) {
            return;
        }
        DbCert cert = CaSQLiteUtil.getCertificates(caDir, serial);
        jTextPaneConsole.setText(null);
        if (cert != null) {
            jTextPaneConsole.setText(cert.getCertificate().toString(true));
            jTextPaneConsole.setCaretPosition(0);
        }
    }

    private long longValue(Object valueAt) {
        long value = 0;
        try {
            value = Long.valueOf((String) valueAt);
        } catch (Exception ex) {
        }
        try {
            value = Long.valueOf((Long) valueAt);
        } catch (Exception ex) {
        }
        return value;
    }

}
